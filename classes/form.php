<?php
/**
 * Created by PhpStorm.
 * User: Galicz Miklós
 * Date: 2014.01.24.
 * Time: 13:01
 */

namespace blackfyre\bootFormer;

/**
 *
 */
/**
 *
 */
define('_BOOTFORMER_LAYOUT_NORMAL', 0);
/**
 *
 */
define('_BOOTFORMER_LAYOUT_INLINE', 1);
/**
 *
 */
define('_BOOTFORMER_LAYOUT_HORIZONTAL', 3);

/**
 * Class formHandler
 * @package blackfyre\bootFormer
 */
class formHandler
{

    /**
     * Form layout type
     * @var string bootstrap-horizontal
     */
    private $formLayout = '3';

    /**
     * Default lable:input ratio
     * @var string 2:10
     */
    private $formRatio = '2:10';

    /**
     * Form submit mode
     * @var string
     */
    private $mode = 'post';

    /**
     * @var null
     */
    private $submitTarget = null;

    /**
     * @var string
     */
    private $submitStyle = 'primary';

    /**
     * @var null
     */
    private $uploadPath = null;


    /**
     * @var array
     */
    private $elements = array();

    /**
     * @param int $layout
     */
    function setFormLayout($layout = _BOOTFORMER_LAYOUT_HORIZONTAL)
    {
        $this->formLayout = $layout;
    }


    /**
     * @param string $ratio
     */
    function setFormRatio($ratio = '2:10')
    {
        $this->formRatio = $ratio;
    }


    /**
     * Set the form mode to get or post
     * @param string $mode
     */
    function setFormMode($mode = 'post')
    {

        if ($mode != 'post' AND $mode != 'get') {
            $mode = 'post';
        }

        $this->mode = $mode;
    }

    /**
     * @param string $btnClass
     */
    function setSubmitStyle($btnClass = 'primary')
    {
        $this->submitStyle = $btnClass;
    }

    /**
     * Set submit target
     * @param null $target
     */
    function setSubmitTarget($target = null)
    {
        if (is_string($target)) {
            $this->submitTarget = $target;
        }
    }


    /**
     * Reset the form class variables to their default values
     * return void
     */
    private function resetForm()
    {
        $this->setFormLayout();
        $this->setFormRatio();
    }

    /**
     * Clear the postBack if there's no re-post set
     * @param bool $force
     */
    function clearPostBack($force = false)
    {
        if (isset($_SESSION['postBack']) and !isset($_SESSION['postBack']['repost'])) {
            unset($_SESSION['postBack']);
        }

        if ($force) {
            unset($_SESSION['postBack']);
        }
    }

    /**
     * @param null $data
     *
     * @return bool
     */
    function postBack($data = null)
    {
        if (is_array($data)) {
            $_SESSION['postBack']           = $data;
            $_SESSION['postBack']['repost'] = true;

            return true;
        }

        return false;
    }

    /**
     *
     * Remove unneeded data parts generated by the system
     *
     * Use right before posting data to the DB
     *
     * @param null|array $data
     * @return null
     */
    function cleanUpData($data = null)
    {
        unset($data['editForm'], $data['repost']);

        return $data;
    }

    /**
     * Cleans simple string like text, for text input fields
     *
     * @param $variable
     * @return mixed
     */
    static function cleanVar($variable)
    {
        $variable = htmlspecialchars(trim(stripcslashes(strip_tags($variable))), ENT_QUOTES);

        return $variable;
    }

    /**
     *
     * A more relaxed cleaner for textareas and wysiwyg editors
     *
     * @param string $var
     * @return string
     */
    static function cleanTextField($var)
    {
        $var = strip_tags($var, '<h1><h2><h3><h4><h5><h6><br><b><string><ul><ol><li><a><i><em><pre><table><tbody><thead><tfoor><th><tr><td><p><div><img><iframe><sub><sup><strong><span><hr>');
        $var = htmlspecialchars($var, ENT_QUOTES);

        return $var;
    }

    /**
     *
     * The validator() calls the cleaner() to sanitize the input values and evaluates the remaining data
     *
     * @param null|array $data
     * @return null|array
     */
    function validator($data = null)
    {
        if (is_null($data)) {
            $data = $this->cleaner();
        } else {
            $data = $this->cleaner($data);
        }

        if (isset($_SESSION['postBack'])) {
            unset($_SESSION['postBack']);
        }

        $returnArray = null;

        foreach ($data as $key => $value) {

            $dataTypeAndKey = explode('-', $key);
            $dataType       = $dataTypeAndKey[0];
            $dataKey        = $dataTypeAndKey[1];

            if ($dataType != 'submit') {
                switch ($dataType) {
                    case 'text':
                        if ($value != "") {
                            $returnArray[$dataKey] = $value;
                        } else {
                            $returnArray[$dataKey] = false;
                        }
                        break;
                    case 'textArea':
                        if ($value != "") {
                            $returnArray[$dataKey] = $value;
                        } else {
                            $returnArray[$dataKey] = false;
                        }
                        break;
                    case 'num':
                    case 'year':
                        $returnArray[$dataKey] = filter_var($value, FILTER_VALIDATE_INT);
                        break;
                    case 'email':
                        $returnArray[$dataKey] = filter_var($value, FILTER_VALIDATE_EMAIL);
                        break;
                    case 'bool':
                        if ($value == '1') {
                            $returnArray[$dataKey] = true;
                        } else {
                            $returnArray[$dataKey] = false;
                        }
                        break;
                    default:
                        if ($value != "") {
                            $returnArray[$dataKey] = $value;
                        } else {
                            $returnArray[$dataKey] = false;
                        }
                        break;
                }
            }
        }


        if (isset($_FILES) AND count($_FILES) > 0) {

            $returnArray = array_merge($returnArray, $this->handleFileUpload());
        }

        return $returnArray;
    }

    /**
     * @return null|array
     */
    private function handleFileUpload()
    {
        $result = null;

        foreach ($_FILES AS $key => $f) {
            $ext = pathinfo($f['name'], PATHINFO_EXTENSION);
            $ext = strtolower($ext);

            $fileName = sha1($f['name'] . date('Y-m-d H:i:s')) . '.' . $ext;

            $filePath = $this->uploadPath . '/';

            if (!file_exists($filePath)) {
                mkdir($filePath, 777, true);
            }

            $fullPath = $filePath . $fileName;

            $output = null;

            if (move_uploaded_file($f['tmp_name'], $fullPath)) {
                $output = $fileName;
            } else {
                $output = false;

            }

            $key             = explode('-', $key);
            $result[$key[1]] = $output;
        }

        return $result;
    }

    /**
     * Végignyálazza a $_POST-ban található adatokat és mező típusnak megfelelően ellenőrzi a tartalmakat
     * Miután végzett kiüríti a $_POST-ot
     *
     * @param null|array $data
     * @return array
     */
    private function cleaner($data = null)
    {
        if (is_array($data)) {
            $rawData = $data;
        } else {
            $rawData = $_POST;
        }

        $returnArray = array();

        foreach ($rawData AS $rawKey => $data) {
            $dataTypeAndKey = explode('-', $rawKey);

            if (isset($dataTypeAndKey[1])) {
                $dataType = $dataTypeAndKey[0];
                $dataKey  = $dataTypeAndKey[1];
            } else {
                $dataType = $dataTypeAndKey[0];
                $dataKey  = $dataTypeAndKey[0];
            }


            if ($dataType != 'submit') {
                switch ($dataType) {
                    case 'textarea':
                        $returnArray[$dataType . '-' . $dataKey] = $this->cleanTextField($data);
                        break;
                    case 'email':
                        $returnArray[$dataType . '-' . $dataKey] = filter_var($data, FILTER_SANITIZE_EMAIL);
                        break;
                    case 'num':
                        $returnArray[$dataType . '-' . $dataKey] = filter_var($data, FILTER_SANITIZE_NUMBER_INT);
                        break;
                    case 'year':
                        $returnArray[$dataType . '-' . $dataKey] = filter_var($data, FILTER_SANITIZE_NUMBER_INT);
                        break;
                    case 'phone':
                        $sanitize                                = filter_var($data, FILTER_SANITIZE_NUMBER_INT);
                        $sanitize                                = str_replace(array('+', '-', '/'), '', $sanitize);
                        $returnArray[$dataType . '-' . $dataKey] = $sanitize;
                        break;
                    case 'checklist':
                        $returnArray[$dataType . '-' . $dataKey] = $data;
                        break;
                    default:
                        if (is_array($data)) {
                            $returnArray[$dataType . '-' . $dataKey] = $data;
                        } else {
                            $returnArray[$dataType . '-' . $dataKey] = $this->cleanVar($data);
                        }
                        break;
                }
            }
        }

        $_POST = null;

        return $returnArray;

    }

    /**
     *
     * This method is responsible for creating error messages, but is largely obsolete
     *
     * @TODO revise
     *
     * @deprecated revision needed
     *
     * @param null $dataArray
     * @param bool $editForm Ha true akkor a passWord1 és passWord2 kulcsokra nem vonatkoznak a szabályok
     * @return bool
     */
    public function checkForErrors($dataArray = null, $editForm = false)
    {
        if (is_array($dataArray)) {

            $valid = true;

            foreach ($dataArray AS $key => $value) {

                if ($value === false) {

                    if (!$editForm) {

                        if (isset($_SESSION['lastFormInputs'][$key])) {
                            $name = $_SESSION['lastFormInputs'][$key];
                        } else {
                            $name = $key;
                        }

                        $valid = false;
                    } else {
                        if ($key != 'passWord1' AND $key != 'passWord2') {
                            if (isset($_SESSION['lastFormInputs'][$key])) {
                                $name = $_SESSION['lastFormInputs'][$key];
                            } else {
                                $name = $key;
                            }

                            $valid = false;
                        }
                    }
                }
            }

            unset($_SESSION['lastFormInputs']);

            return $valid;

        } else {

            return true;
        }
    }

    /**
     *
     * Add an input to a yet to be created form
     *
     *
     * @param string $inputType
     * @param string $inputName
     * @param array $attributes
     */
    public function addInput($inputType = null, $inputName = null, $attributes = array())
    {

        $input['type'] = $inputType;
        $input['name'] = $inputType . '-' . $inputName;
        $input['id']   = $input['name'];

        $input['value'] = (isset($attributes['value']) ? $attributes['value'] : null);
        $input['label'] = (isset($attributes['label']) ? $attributes['label'] : null);


        if ($inputType != 'dropdownList' AND $inputType != 'checkBox') {
            $input['value'] = (isset($_SESSION['postBack'][$inputName]) ? $_SESSION['postBack'][$inputName] : $input['value']);
        }


        foreach ($attributes AS $k => $v) {
            $input[$k] = $v;
        }


        $_SESSION['lastFormInputs'][$inputName] = $input['label'];

        $this->elements[] = $input;
    }

    /**
     * @param $needle
     * @param $haystack
     * @return bool
     */
    private function hasCSSClass($needle, $haystack)
    {
        $haystack = explode(' ', $haystack);

        if (in_array($needle, $haystack)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * @param array $attributes
     * @return string
     */
    private function parseAttributes($attributes = array())
    {
        $ignoredAttributes = array('type', 'label', 'prepend', 'append', 'leftCombo', 'rightCombo', 'inline');
        $booleanAttributes = array('disabled', 'readonly', 'multiple', 'checked', 'required', 'autofocus');

        $ignoreValueTypes = array('select', 'textarea');

        $ignoreButtons = array('button', 'submit', 'reset');

        if (in_array($attributes['type'], $ignoreValueTypes)) {
            $ignoredAttributes[] = 'value';
        }

        if (!isset($attributes['class']) AND !in_array($attributes['type'], $ignoreButtons)) {
            $attributes['class'] = 'form-control';
        }

        $stringToRender = array();

        foreach ($attributes AS $k => $v) {
            if (!in_array($k, $ignoredAttributes)) {

                if (in_array($k, $booleanAttributes)) {

                    if ($v === true) {
                        $stringToRender[] = $k;
                    }

                } else {

                    if ($k == 'class') {

                        /*
                         * check the class section for the form-control class, and if missing, add it
                         */
                        if (!$this->hasCSSClass('form-control', $v) AND !in_array($attributes['type'], $ignoreButtons)) {
                            $v = 'form-control ' . $v;
                        } elseif (!$this->hasCSSClass('btn', $v) AND in_array($attributes['type'], $ignoreButtons)) {
                            $v = 'btn ' . $v;
                        }

                    }

                    $stringToRender[] = $k . '="' . $v . '"';
                }

            }
        }

        return implode(' ', $stringToRender);
    }

    /**
     * @param array $elementData
     * @return string
     */
    private function generalInputElement($elementData = array())
    {

        $ratio = explode(':', $this->formRatio);

        /*
         * Create general form group
         */
        $r = '<div class="form-group">';

        /*
         * If the left or right combos are set, add the input-group for stacking
         */
        if (isset($elementData['leftCombo']) || isset($elementData['rightCombo'])) {
            $r .= '<div class="input-group">' . "\r\n";

            /*
             * If the left part is set add it
             */
            if (isset($elementData['leftCombo'])) {

                $r .= '<span class="input-group-addon">' . $elementData['leftCombo'] . '</span>' . "\r\n";
            }

        }

        /*
         * If the label is set, add it with no regard for stacked inputs...
         */
        if (!is_null($elementData['label']) || $this->formLayout == _BOOTFORMER_LAYOUT_HORIZONTAL) {

            if ($this->formLayout == _BOOTFORMER_LAYOUT_HORIZONTAL AND !in_array($elementData['type'], array('button', 'reset', 'submit'))) {
                if (is_null($elementData['label'])) {
                    $elementData['label'] = 'MISSING';
                }
            }

            $classAdd = null;

            if ($this->formLayout == _BOOTFORMER_LAYOUT_HORIZONTAL) {
                $classAdd = 'col-sm-' . $ratio[0] . ' control-label';
            }

            $r .= '<label ' . (!is_null($classAdd) ? 'class="' . $classAdd . '"' : '') . ' for="' . $elementData['id'] . '">' . $elementData['label'] . '</label>' . "\r\n";
        }

        if ($this->formLayout == _BOOTFORMER_LAYOUT_HORIZONTAL) {
            $r .= '<div class="col-sm-' . $ratio[1] . '">' . "\r\n";
        }

        /*
         * This is the fun part, the general input type is in the default branch
         */
        switch ($elementData['type']) {
            default:
                $r .= '<input type="' . $elementData['type'] . '" ' . $this->parseAttributes($elementData) . '>';
                break;
            case 'select':
                $r .= $this->renderSelectOption($elementData);
                break;
            case 'checkbox':
                break;
            case 'radio':
                break;
            case 'textarea':
                $r .= $this->renderTextArea($elementData);
                break;
            case 'button':
                $r .= $this->renderButton($elementData);
                break;
            case 'submit':
                $r .= $this->renderSubmit($elementData);
                break;
            case 'reset':
                $r .= $this->renderReset($elementData);
                break;
        }

        if ($this->formLayout == _BOOTFORMER_LAYOUT_HORIZONTAL) {
            $r .= '</div> <!-- end ratio -->' . "\r\n";
        }

        if (isset($elementData['leftCombo']) || isset($elementData['rightCombo'])) {

            if (isset($elementData['rightCombo'])) {
                $r .= '<span class="input-group-addon">' . $elementData['rightCombo'] . '</span>';
            }

            $r .= '</div> <!-- end stacked -->' . "\r\n";
        }

        $r .= '</div> <!-- end input group -->' . "\r\n";

        return $r;
    }

    /**
     * @param array $element
     * @return null|string
     */
    function renderSelectOption($element = array())
    {
        if (!isset($element['value'])) {
            return null;
        }

        $r = '<select ' . $this->parseAttributes($element) . '>';

        foreach ($element['value'] AS $k => $v) {

            if (is_array($v)) {

                $r .= '<optgroup>' . $k . '</optgroup>';

                foreach ($v as $optKey => $optVal) {
                    $r .= '<option value="' . $optKey . '">' . $optVal . '</option>';
                }

            } else {
                $r .= '<option value="' . $k . '">' . $v . '</option>';
            }


        }

        $r .= '</select>';

        return $r;
    }

    /**
     * @param array $element
     * @return string
     */
    function renderButton($element = array())
    {
        return '<button type="' . $element['type'] . '" ' . $this->parseAttributes($element) . '>' . (isset($element['value']) ? $element['value'] : null) . '</button>';
    }

    /**
     * @param array $element
     * @return string
     */
    function renderSubmit($element = array())
    {
        $element['class'] = 'btn btn-' . $this->submitStyle;

        return $this->renderButton($element);
    }

    /**
     * @param array $element
     * @return string
     */
    function renderReset($element = array())
    {
        return $this->renderButton($element);
    }

    /**
     * @param array $element
     * @return string
     */
    function renderTextArea($element = array())
    {
        return '<textarea ' . $this->parseAttributes($element) . '>' . (isset($element['value']) ? $element['value'] : null) . '</textarea>';
    }

    /**
     *
     * Generate the form, based on the already added inputs
     *
     * @param string $formName
     * @param string $submitText
     * @param string $submitAdd Addition code to place next to the Submit button (eg. cancel, reset, ...)
     *
     * @return bool|string
     */
    public function generateForm($formName = null, $submitText = null, $submitAdd = null)
    {
        if (is_array($this->elements)) {

            $ratio = $this->formRatio;

            $ratio = explode(':', $ratio);

            $ratio['label'] = $ratio[0];
            $ratio['input'] = $ratio[1];

            $rows = null;

            foreach ($this->elements AS $formElement) {

                var_dump($formElement);

                $rows .= $this->generalInputElement($formElement);

            }

            switch ($this->formLayout) {
                case _BOOTFORMER_LAYOUT_NORMAL:
                default:
                    $layout = null;
                    break;

                case _BOOTFORMER_LAYOUT_INLINE:
                    $layout = 'form-inline';
                    break;

                case _BOOTFORMER_LAYOUT_HORIZONTAL:
                    $layout = 'form-horizontal';
                    break;
            }

            $out = '<form role="form" method="' . $this->mode . '" ';
            $out .= 'data-async class="' . $layout . '" action="' . (is_null($this->submitTarget) ? '' : $this->submitTarget) . '" id="form-' . $this->slugger($formName) . '" accept-charset="utf-8" ' . ($this->mode == 'post' ? 'enctype="multipart/form-data"' : '') . '>';

            $out .= $rows;

            $out .= '</form>';


            $this->elements = null;

            $this->resetForm();

            return $out;

        }

        return false;
    }

    /**
     *
     * Courtesy of an unknown source.
     * If this part of the code resembles yours and you can verify that Your're the author then the required information will be shown here!
     *
     * This bit of code creates a slugged version of the input string ($str).
     *
     * @param string $str Input string
     * @param array $replace An array of special characters and their replacement
     * @param string $delimiter The delimiter to separate the words
     * @return string The slug version of the input string
     */
    public static function slugger($str, $replace = array(), $delimiter = '-')
    {
        if (!empty($replace)) {
            $str = str_replace((array )$replace, ' ', $str);
        }

        $clean = iconv('UTF-8', 'ASCII//TRANSLIT', $str);
        $clean = preg_replace("/[^a-zA-Z0-9\/_|+ -]/", '', $clean);
        $clean = strtolower(trim($clean, '-'));
        $clean = preg_replace("/[\/_|+ -]+/", $delimiter, $clean);

        return $clean;
    }


    /**
     * @param string $toWatch
     * @return bool
     */
    function watchForm($toWatch = '')
    {

        if ($toWatch == '') {
            return false;
        }

        if (isset($_POST['submit-' . $toWatch])) {
            return true;
        }

        return false;
    }
}
